// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // if C-instruction then opCodeC=1, if A-instruction then opCodeA=1
    And(a=true, b=instruction[15], out=opCodeC);
    Not(in=opCodeC, out=opCodeA);
    Mux16(a=instruction, b=aluOut, sel=opCodeC, out=aRegIn);

    // A-register
    // load is instruction bit 5 or A-instruction
    Or(a=opCodeA, b=instruction[5], out=loadA);
    ARegister(in=aRegIn, load=loadA , out=aRegOut, out[0..14]=addressM);

    // Read either from A-register or M-register
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=aOrM);

    // D-register
    // load is instruction bit 4 if C-instruction
    And(a=opCodeC, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=dRegOut);

    // write to M controlled by load in instruction bit 3, only apply for C-instructor
    And(a=opCodeC, b=instruction[3], out=writeM);

    // ALU
    // 6 input bits denoted zx,nx,zy,ny,f,no from instruction[6..11] 
    ALU(x=dRegOut, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, zr=zr, ng=ng, out=aluOut);

    // PC load = func(jump bits [0..2], ALU control outputs)

    // case 1 JLT
    And(a=instruction[2], b=ng, out=jlt); 
    // case 2 JEQ 
    And(a=instruction[1], b=zr, out=jeq);
    // case 3 JGT
    Or(a=ng, b=zr, out=le);
    Not(in=le, out=pos);
    And(a=instruction[0], b=pos, out=jgt);
    // case 4 JLE
    // Or(a=jlt, b=jeq, out=jle);
    // case 5 JGE
    Or(a=jgt, b=jeq, out=jge);
    // case 6 JNE
    Or(a=jlt, b=jgt, out=jne);
    // one of 6 cases
    Or(a=jlt,  b=jge, out=tmp1);
    Or(a=tmp1, b=jne, out=jump);
    // load to PC
    And(a=opCodeC, b=jump, out=load);

    // no load, then increment
    Not(in=load, out=increment);

    PC(in=aRegOut, load=load, inc=increment, reset=reset, out[0..14]=pc);
}
